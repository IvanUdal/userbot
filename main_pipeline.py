"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ–≥–æ Telegram Userbot —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –ø–∞–π–ø–ª–∞–π–Ω–æ–≤
"""

import asyncio
import logging
import os
from pathlib import Path
from dotenv import load_dotenv
from telethon import TelegramClient, events
from telethon.errors import FloodWaitError, ChatAdminRequiredError

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
from config import Config
from modules.pipeline_manager import PipelineManager
from modules.pipeline_commands import PipelineCommands
from safety_manager import SafetyManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/userbot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class TelegramUserbot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram Userbot —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –ø–∞–π–ø–ª–∞–π–Ω–æ–≤"""
    
    def __init__(self):
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        load_dotenv()
        self.config = Config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.client = None
        self.pipeline_manager = None
        self.pipeline_commands = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'start_time': None,
            'messages_processed': 0,
            'pipelines_active': 0,
            'errors': 0
        }
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram Userbot —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –ø–∞–π–ø–ª–∞–π–Ω–æ–≤...")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            await self.config.load_from_env()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞
            session_string = None
            if os.path.exists("session_string.txt"):
                try:
                    with open("session_string.txt", "r") as f:
                        session_string = f.read().strip()
                    logger.info("üîê –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏: {e}")
            
            if session_string:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞
                from telethon.sessions import StringSession
                logger.info(f"üîê –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏ –¥–ª–∏–Ω–æ–π {len(session_string)} —Å–∏–º–≤–æ–ª–æ–≤")
                self.client = TelegramClient(
                    StringSession(session_string),
                    self.config.api_id,
                    self.config.api_hash,
                    system_version="4.16.30-vxCUSTOM",
                    device_model="Samsung Galaxy S23",
                    app_version="9.4.2"
                )
            else:
                # –û–±—ã—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–µ—Å—Å–∏–µ–π
                self.client = TelegramClient(
                    self.config.session_name,
                    self.config.api_id,
                    self.config.api_hash,
                    system_version="4.16.30-vxCUSTOM",
                    device_model="Samsung Galaxy S23",
                    app_version="9.4.2"
                )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞–π–ø–ª–∞–π–Ω–æ–≤
            self.pipeline_manager = PipelineManager(self.client)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
            self.pipeline_commands = PipelineCommands(self.client, self.pipeline_manager)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            self.safety_manager = SafetyManager()
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º connect() –≤–º–µ—Å—Ç–æ start() –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞
                await self.client.connect()
                
                if not await self.client.is_user_authorized():
                    if session_string:
                        logger.error("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–∞–∂–µ —Å–æ —Å—Ç—Ä–æ–∫–æ–π —Å–µ—Å—Å–∏–∏")
                        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å–æ —Å—Ç—Ä–æ–∫–æ–π —Å–µ—Å—Å–∏–∏")
                    else:
                        logger.error("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ù—É–∂–Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
                        raise Exception("–¢—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
                
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {e}")
                raise
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥
            await self.pipeline_commands.setup_commands()
            logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –ø–∞–π–ø–ª–∞–π–Ω–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
            await self.setup_basic_commands()
            logger.info("‚úÖ –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            
            # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–π–ø–ª–∞–π–Ω–æ–≤
            await self.start_active_pipelines()
            
            # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            asyncio.create_task(self.monitoring_task())
            
            self.stats['start_time'] = asyncio.get_event_loop().time()
            logger.info("üéâ Telegram Userbot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
            if self.config.notify_start:
                await self.send_startup_notification()
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await self.client.run_until_disconnected()
        
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
            raise
    
    async def setup_basic_commands(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥"""
        
        @self.client.on(events.NewMessage(pattern=r'^\.ping$'))
        async def ping_command(event):
            await self.ping_command_handler(event)
        
        @self.client.on(events.NewMessage(pattern=r'^\.info$'))
        async def info_command(event):
            await self.info_command_handler(event)
        
        @self.client.on(events.NewMessage(pattern=r'^\.help$'))
        async def help_command(event):
            await self.help_command_handler(event)
        
        @self.client.on(events.NewMessage(pattern=r'^\.status$'))
        async def status_command(event):
            await self.status_command_handler(event)
        
        @self.client.on(events.NewMessage(pattern=r'^\.safety$'))
        async def safety_command(event):
            await self.safety_command_handler(event)
        
        @self.client.on(events.NewMessage(pattern=r'^\.config$'))
        async def config_command(event):
            await self.config_command_handler(event)
        
        @self.client.on(events.NewMessage(pattern=r'^\.test_access$'))
        async def test_access_command(event):
            await self.test_access_command_handler(event)
        
        @self.client.on(events.NewMessage(pattern=r'^\.test_media$'))
        async def test_media_command(event):
            await self.test_media_command_handler(event)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        if self.config.forwarding_enabled and self.config.source_group_id and self.config.target_group_id:
            logger.info(f"üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {self.config.source_group_id} -> {self.config.target_group_id}")
            @self.client.on(events.NewMessage(chats=self.config.source_group_id))
            async def forward_handler(event):
                await self.forward_message_handler(event)
        else:
            logger.warning(f"‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:")
            logger.warning(f"   - forwarding_enabled: {self.config.forwarding_enabled}")
            logger.warning(f"   - source_group_id: {self.config.source_group_id}")
            logger.warning(f"   - target_group_id: {self.config.target_group_id}")
    
    async def start_active_pipelines(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–π–ø–ª–∞–π–Ω–æ–≤"""
        try:
            active_pipelines = [
                name for name, pipeline in self.pipeline_manager.pipelines.items()
                if pipeline.enabled
            ]
            
            if active_pipelines:
                logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ {len(active_pipelines)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–π–ø–ª–∞–π–Ω–æ–≤...")
                
                for pipeline_name in active_pipelines:
                    success = await self.pipeline_manager.start_pipeline(pipeline_name)
                    if success:
                        self.stats['pipelines_active'] += 1
                        logger.info(f"‚úÖ –ü–∞–π–ø–ª–∞–π–Ω '{pipeline_name}' –∑–∞–ø—É—â–µ–Ω")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞ '{pipeline_name}'")
                
                logger.info(f"üìä –ó–∞–ø—É—â–µ–Ω–æ –ø–∞–π–ø–ª–∞–π–Ω–æ–≤: {self.stats['pipelines_active']}")
            else:
                logger.info("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–π–ø–ª–∞–π–Ω–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–æ–≤: {e}")
    
    async def monitoring_task(self):
        """–ó–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while True:
            try:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                await self.update_statistics()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–æ–≤
                await self.check_pipeline_health()
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤
                await self.send_periodic_reports()
                
                await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(60)
    
    async def update_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            stats = await self.pipeline_manager.get_statistics()
            
            self.stats['messages_processed'] = stats['report']['summary']['total_processed']
            self.stats['errors'] = stats['report']['summary']['total_errors']
            self.stats['pipelines_active'] = stats['active_pipelines']
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def check_pipeline_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–æ–≤"""
        try:
            for pipeline_name in self.pipeline_manager.pipelines:
                status = await self.pipeline_manager.get_pipeline_status(pipeline_name)
                if status and status['stats']:
                    last_activity = status['stats'].get('last_activity')
                    if last_activity:
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç
                        from datetime import datetime, timedelta
                        last_activity_dt = datetime.fromisoformat(last_activity)
                        if datetime.now() - last_activity_dt > timedelta(minutes=10):
                            logger.warning(f"‚ö†Ô∏è –ü–∞–π–ø–ª–∞–π–Ω '{pipeline_name}' –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–æ–≤: {e}")
    
    async def send_periodic_reports(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤"""
        try:
            if self.config.notify_stats:
                stats = await self.pipeline_manager.get_statistics()
                
                report = f"üìä **–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç**\n\n"
                report += f"üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['report']['summary']['total_processed']}\n"
                report += f"‚ùå –û—à–∏–±–æ–∫: {stats['report']['summary']['total_errors']}\n"
                report += f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–π–ø–ª–∞–π–Ω–æ–≤: {stats['active_pipelines']}\n"
                report += f"üì• –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {stats['sources_count']}\n"
                report += f"üì§ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–π: {stats['destinations_count']}"
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç
                if hasattr(self.config, 'admin_chat_id') and self.config.admin_chat_id:
                    await self.client.send_message(self.config.admin_chat_id, report)
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
    
    async def send_startup_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ"""
        try:
            notification = f"üöÄ **Telegram Userbot –∑–∞–ø—É—â–µ–Ω**\n\n"
            notification += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            notification += f"‚Ä¢ –ü–∞–π–ø–ª–∞–π–Ω–æ–≤: {len(self.pipeline_manager.pipelines)}\n"
            notification += f"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(self.pipeline_manager.sources)}\n"
            notification += f"‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–π: {len(self.pipeline_manager.destinations)}\n"
            notification += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–π–ø–ª–∞–π–Ω–æ–≤: {self.stats['pipelines_active']}"
            
            if hasattr(self.config, 'admin_chat_id') and self.config.admin_chat_id:
                await self.client.send_message(self.config.admin_chat_id, notification)
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ: {e}")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    
    async def ping_command_handler(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã .ping"""
        try:
            response = f"üèì **Pong!**\n\n"
            response += f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {asyncio.get_event_loop().time() - self.stats['start_time']:.2f}—Å\n"
            response += f"üìä –°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['messages_processed']}\n"
            response += f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–π–ø–ª–∞–π–Ω–æ–≤: {self.stats['pipelines_active']}"
            
            await event.respond(response)
        
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def info_command_handler(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã .info"""
        try:
            config_info = self.config.get_config_info()
            await event.respond(config_info)
        
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
    
    async def help_command_handler(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã .help"""
        try:
            help_text = """
ü§ñ **Telegram Userbot - –°–ø—Ä–∞–≤–∫–∞**

üìã **–ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `.ping` - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
‚Ä¢ `.info` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
‚Ä¢ `.status` - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ `.safety` - –û—Ç—á–µ—Ç –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
‚Ä¢ `.help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üîÑ **–ö–æ–º–∞–Ω–¥—ã –ø–∞–π–ø–ª–∞–π–Ω–æ–≤:**
‚Ä¢ `.pipelines_start_all` - –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø–∞–π–ø–ª–∞–π–Ω–æ–≤
‚Ä¢ `.pipelines_stop_all` - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø–∞–π–ø–ª–∞–π–Ω–æ–≤
‚Ä¢ `.pipeline_status <name>` - –°—Ç–∞—Ç—É—Å –ø–∞–π–ø–ª–∞–π–Ω–∞
‚Ä¢ `.pipelines_list` - –°–ø–∏—Å–æ–∫ –ø–∞–π–ø–ª–∞–π–Ω–æ–≤

üì• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏:**
‚Ä¢ `.source_add <name> <id>` - –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫
‚Ä¢ `.source_remove <name>` - –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫
‚Ä¢ `.sources_list` - –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

üì§ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è–º–∏:**
‚Ä¢ `.destination_add <name> <type> <config>` - –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
‚Ä¢ `.destination_remove <name>` - –£–¥–∞–ª–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
‚Ä¢ `.destinations_list` - –°–ø–∏—Å–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç:**
‚Ä¢ `.stats_export all_pipelines` - –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

üîß **–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
‚Ä¢ `.source_add news_channel -1001234567890`
‚Ä¢ `.destination_add telegram_dest telegram {"chat_id": -100111222333}`
‚Ä¢ `.pipeline_create news_analytics news_channel telegram_dest,export_file`
"""
            await event.respond(help_text)
        
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏: {e}")
    
    async def status_command_handler(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã .status"""
        try:
            stats = await self.pipeline_manager.get_statistics()
            
            status_text = f"üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã**\n\n"
            status_text += f"üîÑ **–ü–∞–π–ø–ª–∞–π–Ω—ã:**\n"
            status_text += f"‚Ä¢ –í—Å–µ–≥–æ: {stats['pipelines_count']}\n"
            status_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_pipelines']}\n\n"
            
            status_text += f"üì• **–ò—Å—Ç–æ—á–Ω–∏–∫–∏:**\n"
            status_text += f"‚Ä¢ –í—Å–µ–≥–æ: {stats['sources_count']}\n"
            status_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_sources']}\n\n"
            
            status_text += f"üì§ **–ù–∞–∑–Ω–∞—á–µ–Ω–∏—è:**\n"
            status_text += f"‚Ä¢ –í—Å–µ–≥–æ: {stats['destinations_count']}\n"
            status_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_destinations']}\n\n"
            
            if stats['report']:
                report = stats['report']
                status_text += f"üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:**\n"
                status_text += f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {report['summary']['total_processed']}\n"
                status_text += f"‚Ä¢ –û—à–∏–±–æ–∫: {report['summary']['total_errors']}\n"
                status_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–π–ø–ª–∞–π–Ω–æ–≤: {report['summary']['active_pipelines']}"
            
            await event.respond(status_text)
        
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    async def safety_command_handler(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã .safety"""
        try:
            safety_report = self.safety_manager.get_safety_report()
            await event.respond(safety_report)
        
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
    
    async def config_command_handler(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã .config"""
        try:
            config_info = f"üìã **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:**\n\n"
            config_info += f"üîÑ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞: {'–î–∞' if self.config.forwarding_enabled else '–ù–µ—Ç'}\n"
            config_info += f"üì• –ò—Å—Ç–æ—á–Ω–∏–∫: {self.config.source_group_id}\n"
            config_info += f"üì§ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {self.config.target_group_id}\n"
            config_info += f"üìù –¢–µ–∫—Å—Ç: {'–î–∞' if self.config.forward_text else '–ù–µ—Ç'}\n"
            config_info += f"üñºÔ∏è –ú–µ–¥–∏–∞: {'–î–∞' if self.config.forward_media else '–ù–µ—Ç'}\n"
            config_info += f"üòÄ –°—Ç–∏–∫–µ—Ä—ã: {'–î–∞' if self.config.forward_stickers else '–ù–µ—Ç'}\n"
            config_info += f"üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ: {'–î–∞' if self.config.forward_voice else '–ù–µ—Ç'}\n"
            config_info += f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: {'–î–∞' if self.config.forward_documents else '–ù–µ—Ç'}\n"
            
            await event.respond(config_info)
        
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    async def test_access_command_handler(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã .test_access"""
        try:
            access_info = f"üîç **–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–∞–º:**\n\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∏—Å—Ö–æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ
            try:
                source_chat = await self.client.get_entity(self.config.source_group_id)
                access_info += f"‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ ({self.config.source_group_id}): –î–æ—Å—Ç—É–ø –µ—Å—Ç—å\n"
                access_info += f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {getattr(source_chat, 'title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            except Exception as e:
                access_info += f"‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ ({self.config.source_group_id}): –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ - {e}\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ
            try:
                target_chat = await self.client.get_entity(self.config.target_group_id)
                access_info += f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ ({self.config.target_group_id}): –î–æ—Å—Ç—É–ø –µ—Å—Ç—å\n"
                access_info += f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {getattr(target_chat, 'title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            except Exception as e:
                access_info += f"‚ùå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ ({self.config.target_group_id}): –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ - {e}\n"
            
            await event.respond(access_info)
        
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞: {e}")
    
    async def test_media_command_handler(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã .test_media"""
        try:
            await event.respond("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –º–µ–¥–∏–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–¥–∏–∞
            media_info = f"üìã **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–¥–∏–∞:**\n\n"
            media_info += f"üñºÔ∏è –ú–µ–¥–∏–∞ –≤–∫–ª—é—á–µ–Ω–æ: {'–î–∞' if self.config.forward_media else '–ù–µ—Ç'}\n"
            media_info += f"üìù –¢–µ–∫—Å—Ç –≤–∫–ª—é—á–µ–Ω: {'–î–∞' if self.config.forward_text else '–ù–µ—Ç'}\n"
            media_info += f"üòÄ –°—Ç–∏–∫–µ—Ä—ã –≤–∫–ª—é—á–µ–Ω—ã: {'–î–∞' if self.config.forward_stickers else '–ù–µ—Ç'}\n"
            media_info += f"üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ –≤–∫–ª—é—á–µ–Ω—ã: {'–î–∞' if self.config.forward_voice else '–ù–µ—Ç'}\n"
            media_info += f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã: {'–î–∞' if self.config.forward_documents else '–ù–µ—Ç'}\n\n"
            media_info += f"üì• –ò—Å—Ç–æ—á–Ω–∏–∫: {self.config.source_group_id}\n"
            media_info += f"üì§ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {self.config.target_group_id}\n\n"
            media_info += f"‚úÖ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ –≥—Ä—É–ø–ø—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!"
            
            await event.respond(media_info)
        
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–¥–∏–∞: {e}")
    
    async def forward_message_handler(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {event.chat_id}")
            logger.info(f"üìù –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {'—Ç–µ–∫—Å—Ç' if event.text else '–º–µ–¥–∏–∞' if event.media else '–¥—Ä—É–≥–æ–µ'}")
            logger.info(f"üñºÔ∏è –î–µ—Ç–∞–ª–∏ –º–µ–¥–∏–∞: media={bool(event.media)}, photo={bool(event.photo)}, video={bool(event.video)}, document={bool(event.document)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not self._should_forward_message(event):
                logger.info(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏")
                return
            
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏, –Ω–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å—ã–ª–∫—É...")
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ SafetyManager
            success = await self.safety_manager.safe_forward(
                self.client,
                self.config.source_group_id,
                self.config.target_group_id,
                event.message.id
            )
            
            if success:
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {event.message.id} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {event.message.id}")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")
            logger.error(f"üìä –î–µ—Ç–∞–ª–∏: source={self.config.source_group_id}, target={self.config.target_group_id}")
    
    def _should_forward_message(self, event) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: text={bool(event.text)}, media={bool(event.media)}, photo={bool(event.photo)}, video={bool(event.video)}, document={bool(event.document)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç –±–æ—Ç–∞ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if hasattr(event.sender, 'bot') and event.sender.bot:
            logger.info(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if event.text and not self.config.forward_text:
            logger.info(f"‚ùå –¢–µ–∫—Å—Ç –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ)
        if event.media and not self.config.forward_media:
            logger.info(f"‚ùå –ú–µ–¥–∏–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∏–∫–µ—Ä—ã
        if event.sticker and not self.config.forward_stickers:
            logger.info(f"‚ùå –°—Ç–∏–∫–µ—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ
        if event.voice and not self.config.forward_voice:
            logger.info(f"‚ùå –ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        if event.document and not self.config.forward_documents:
            logger.info(f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            return False
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞ –∏ –æ–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
        if event.media and self.config.forward_media:
            logger.info(f"‚úÖ –ú–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω")
            return True
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –∏ –æ–Ω —Ä–∞–∑—Ä–µ—à–µ–Ω
        if event.text and self.config.forward_text:
            logger.info(f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ")
            return True
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∏–∫–µ—Ä –∏ –æ–Ω —Ä–∞–∑—Ä–µ—à–µ–Ω
        if event.sticker and self.config.forward_stickers:
            logger.info(f"‚úÖ –°—Ç–∏–∫–µ—Ä —Ä–∞–∑—Ä–µ—à–µ–Ω")
            return True
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏ –æ–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
        if event.voice and self.config.forward_voice:
            logger.info(f"‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ")
            return True
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∏ –æ–Ω —Ä–∞–∑—Ä–µ—à–µ–Ω
        if event.document and self.config.forward_documents:
            logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω")
            return True
        
        logger.info(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏")
        return False
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram Userbot...")
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø–∞–π–ø–ª–∞–π–Ω–æ–≤
            for pipeline_name in self.pipeline_manager.pipelines:
                await self.pipeline_manager.stop_pipeline(pipeline_name)
            
            # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram
            await self.client.disconnect()
            
            logger.info("‚úÖ Telegram Userbot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    Path("logs").mkdir(exist_ok=True)
    Path("data").mkdir(exist_ok=True)
    Path("data/exports").mkdir(exist_ok=True)
    Path("config").mkdir(exist_ok=True)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot = TelegramUserbot()
    
    try:
        await bot.start()
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.stop()

if __name__ == "__main__":
    asyncio.run(main()) 