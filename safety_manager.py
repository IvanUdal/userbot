"""
–ú–æ–¥—É–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è Telegram Userbot
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ –∏–º–∏—Ç–∞—Ü–∏—é —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
"""

import asyncio
import random
import time
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional

logger = logging.getLogger(__name__)

class SafetyManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è userbot"""
    
    def __init__(self):
        # –õ–∏–º–∏—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.max_messages_per_hour = 20
        self.max_actions_per_day = 100
        self.min_delay_between_actions = 5  # —Å–µ–∫—É–Ω–¥
        self.max_delay_between_actions = 30  # —Å–µ–∫—É–Ω–¥
        
        # –°—á–µ—Ç—á–∏–∫–∏
        self.messages_sent_this_hour = 0
        self.actions_today = 0
        self.last_action_time = 0
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        self.hour_start = datetime.now()
        self.day_start = datetime.now()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.action_history = []
        self.suspicious_patterns = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        self.work_hours = {
            'start': 9,   # 9:00
            'end': 18     # 18:00
        }
        self.weekend_activity = 0.3  # 30% –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ
        
    async def safe_action(self, action_type: str, action_func, *args, **kwargs):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã (–û–¢–ö–õ–Æ–ß–ï–ù–û)
        # if not self._is_work_time():
        #     logger.info("‚è∞ –í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ - –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ")
        #     return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ (–û–¢–ö–õ–Æ–ß–ï–ù–û)
        # if not self._check_limits():
        #     logger.warning("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –¥–µ–π—Å—Ç–≤–∏–π - –æ–∂–∏–¥–∞–Ω–∏–µ")
        #     return False
        
        # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (–û–¢–ö–õ–Æ–ß–ï–ù–û)
        # delay = random.uniform(self.min_delay_between_actions, self.max_delay_between_actions)
        # await asyncio.sleep(delay)
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        try:
            result = await action_func(*args, **kwargs)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–û–¢–ö–õ–Æ–ß–ï–ù–û)
            # self._update_stats(action_type)
            
            logger.info(f"‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {action_type}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è {action_type}: {e}")
            return False
    
    def _is_work_time(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        now = datetime.now()
        current_hour = now.hour
        is_weekend = now.weekday() >= 5
        
        # –í –≤—ã—Ö–æ–¥–Ω—ã–µ —Å–Ω–∏–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if is_weekend:
            return random.random() < self.weekend_activity
        
        # –í —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—ã
        return self.work_hours['start'] <= current_hour <= self.work_hours['end']
    
    def _check_limits(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        now = datetime.now()
        
        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –∫–∞–∂–¥—ã–π —á–∞—Å
        if now - self.hour_start > timedelta(hours=1):
            self.messages_sent_this_hour = 0
            self.hour_start = now
        
        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        if now - self.day_start > timedelta(days=1):
            self.actions_today = 0
            self.day_start = now
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
        if self.messages_sent_this_hour >= self.max_messages_per_hour:
            logger.warning("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Å")
            return False
        
        if self.actions_today >= self.max_actions_per_day:
            logger.warning("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–µ–π—Å—Ç–≤–∏–π")
            return False
        
        return True
    
    def _update_stats(self, action_type: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        now = time.time()
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        if now - self.last_action_time < self.min_delay_between_actions:
            self.suspicious_patterns.append(f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: {action_type}")
        
        self.last_action_time = now
        self.actions_today += 1
        
        if action_type == "message":
            self.messages_sent_this_hour += 1
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        self.action_history.append({
            'type': action_type,
            'timestamp': datetime.now(),
            'hour_count': self.messages_sent_this_hour,
            'day_count': self.actions_today
        })
    
    async def safe_message(self, client, chat_id: int, text: str) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        async def send_message():
            await client.send_message(chat_id, text)
        
        return await self.safe_action("message", send_message)
    
    async def safe_forward(self, client, from_chat: int, to_chat: int, message_id: int) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        async def forward_message():
            await client.forward_messages(to_chat, message_id, from_chat)
        
        return await self.safe_action("forward", forward_message)
    
    async def safe_reply(self, client, chat_id: int, message_id: int, text: str) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        async def reply_message():
            await client.send_message(chat_id, text, reply_to=message_id)
        
        return await self.safe_action("reply", reply_message)
    
    def get_safety_report(self) -> str:
        """–û—Ç—á–µ—Ç –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        report = f"üìä **–û—Ç—á–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏**\n\n"
        report += f"‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {self._is_work_time()}\n"
        report += f"üì® –°–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Å: {self.messages_sent_this_hour}/{self.max_messages_per_hour}\n"
        report += f"üìà –î–µ–π—Å—Ç–≤–∏–π —Å–µ–≥–æ–¥–Ω—è: {self.actions_today}/{self.max_actions_per_day}\n"
        report += f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(self.suspicious_patterns)}\n"
        
        if self.suspicious_patterns:
            report += f"\nüö® –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:\n"
            for pattern in self.suspicious_patterns[-3:]:
                report += f"‚Ä¢ {pattern}\n"
        
        return report
    
    def is_safe_to_continue(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
        # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        if len(self.suspicious_patterns) > 10:
            logger.error("üö® –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
            return False
        
        # –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤
        if self.messages_sent_this_hour >= self.max_messages_per_hour:
            return False
        
        if self.actions_today >= self.max_actions_per_day:
            return False
        
        return True 