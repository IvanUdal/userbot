# –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–æ–π –≥—Ä—É–ø–ø—ã
# –í–ê–ñ–ù–û: –î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã (–ù–ï –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º)
import asyncio
import json
import re
from datetime import datetime
from typing import Optional, Dict, List, Any
from dataclasses import dataclass, asdict
from pathlib import Path

from telethon import TelegramClient
from telethon.events import NewMessage
from telethon.tl.types import MessageMediaPhoto, MessageMediaDocument, MessageMediaWebPage
from telethon.tl.types import ReplyInlineMarkup, KeyboardButton, KeyboardButtonUrl, KeyboardButtonCallback
from telethon.errors import ChatAdminRequiredError, FloodWaitError

# ===========================================
# –ö–õ–ê–°–°–´ –î–õ–Ø –ü–ê–†–°–ò–ù–ì–ê
# ===========================================

@dataclass
class ParsedButton:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–æ–ø–∫–µ"""
    text: str
    button_type: str  # 'url', 'callback', 'web_app', 'switch_inline', etc.
    data: Optional[str] = None  # callback_data –∏–ª–∏ URL
    url: Optional[str] = None
    web_app_url: Optional[str] = None

@dataclass
class BotCommand:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ –±–æ—Ç–∞"""
    command: str
    description: Optional[str] = None
    usage_count: int = 0
    last_used: Optional[datetime] = None

@dataclass
class ParsedMessage:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    message_id: int
    chat_id: int
    sender_id: int
    sender_name: str
    sender_username: str
    text: str
    media_type: Optional[str]
    media_url: Optional[str]
    timestamp: datetime
    reply_to: Optional[int]
    forwards: Optional[Dict]
    reactions: List[Dict]
    hashtags: List[str]
    urls: List[str]
    buttons: List[ParsedButton]  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    is_bot: bool = False
    bot_info: Optional[Dict] = None  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ

@dataclass
class ParsingStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    total_messages: int = 0
    text_messages: int = 0
    media_messages: int = 0
    bot_messages: int = 0
    messages_with_buttons: int = 0  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–Ω–æ–ø–æ–∫
    bot_commands: int = 0  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥ –±–æ—Ç–æ–≤
    errors: int = 0
    start_time: Optional[datetime] = None

# ===========================================
# –ö–õ–ê–°–° –ü–ê–†–°–ï–†–ê –°–û–û–ë–©–ï–ù–ò–ô
# ===========================================

class MessageParser:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram –≥—Ä—É–ø–ø
    –í–ê–ñ–ù–û: –î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã (–ù–ï –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º)
    """
    
    def __init__(self, client: TelegramClient, save_path: str = "data/parsed_messages.json"):
        self.client = client
        self.save_path = Path(save_path)
        self.save_path.parent.mkdir(exist_ok=True)
        self.stats = ParsingStats()
        self.parsing_active = False
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–æ–≤
        self.bot_stats = {
            'total_bots': 0,
            'bot_commands': {},
            'bot_patterns': {},
            'bot_interactions': {}
        }
        
    async def check_group_access(self, chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º)"""
        try:
            chat = await self.client.get_entity(chat_id)
            print(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ: {chat.title}")
            return True
        except Exception as e:
            print(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ: {e}")
            print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä—É–ø–ø—ã")
            return False
        
    async def start_parsing(self, chat_id: int) -> None:
        """–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø—ã"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ
        if not await self.check_group_access(chat_id):
            print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ - –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ")
            return
            
        self.parsing_active = True
        self.stats.start_time = datetime.now()
        
        @self.client.on(NewMessage(chats=chat_id))
        async def parsing_handler(event):
            if not self.parsing_active:
                return
                
            try:
                parsed_message = await self.parse_message(event)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–∞—Ä—Å–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if await self.should_parse_message(parsed_message):
                    await self.save_message(parsed_message)
                    await self.update_bot_stats(parsed_message)
                    self.stats.total_messages += 1
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–Ω–æ–ø–æ–∫
                    if parsed_message.buttons:
                        self.stats.messages_with_buttons += 1
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–æ–≤
                    if parsed_message.is_bot:
                        self.stats.bot_messages += 1
                        if await self.is_bot_command(parsed_message.text):
                            self.stats.bot_commands += 1
                
            except FloodWaitError as e:
                print(f"‚ö†Ô∏è FloodWait: {e}")
                await asyncio.sleep(e.seconds)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
                self.stats.errors += 1
    
    async def should_parse_message(self, message: ParsedMessage) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ø–∞—Ä—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        # –ï—Å–ª–∏ —ç—Ç–æ –±–æ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–æ—Ç–æ–≤
        if message.is_bot:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –±–æ—Ç–∞–º
            return True
        
        return True
    
    async def is_bot_command(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –±–æ—Ç–∞"""
        if not text:
            return False
        
        # –ö–æ–º–∞–Ω–¥—ã –æ–±—ã—á–Ω–æ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å /
        if text.startswith('/'):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ–º–∞–Ω–¥ –±–æ—Ç–æ–≤
        command_patterns = [
            r'^/[a-zA-Z_]+',  # /command
            r'^![a-zA-Z_]+',  # !command
            r'^\.\w+',        # .command
        ]
        
        for pattern in command_patterns:
            if re.match(pattern, text.strip()):
                return True
        
        return False
    
    async def update_bot_stats(self, message: ParsedMessage) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–æ–≤"""
        if not message.is_bot:
            return
        
        bot_id = message.sender_id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–æ–≤
        if bot_id not in self.bot_stats['bot_interactions']:
            self.bot_stats['total_bots'] += 1
            self.bot_stats['bot_interactions'][bot_id] = {
                'name': message.sender_name,
                'username': message.sender_username,
                'message_count': 0,
                'commands': [],
                'buttons_used': 0,
                'media_sent': 0
            }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
        bot_stats = self.bot_stats['bot_interactions'][bot_id]
        bot_stats['message_count'] += 1
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        if await self.is_bot_command(message.text):
            command = self.extract_command(message.text)
            if command:
                bot_stats['commands'].append(command)
                if command not in self.bot_stats['bot_commands']:
                    self.bot_stats['bot_commands'][command] = 0
                self.bot_stats['bot_commands'][command] += 1
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        if message.buttons:
            bot_stats['buttons_used'] += len(message.buttons)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–¥–∏–∞
        if message.media_type:
            bot_stats['media_sent'] += 1
    
    def extract_command(self, text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        if not text:
            return None
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        text = text.strip()
        
        # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—É
        command_patterns = [
            r'^/([a-zA-Z_]+)',  # /command
            r'^!([a-zA-Z_]+)',  # !command
            r'^\.(\w+)',        # .command
        ]
        
        for pattern in command_patterns:
            match = re.match(pattern, text)
            if match:
                return match.group(1)
        
        return None
    
    async def stop_parsing(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"""
        self.parsing_active = False
        print("üõë –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def parse_buttons(self, reply_markup) -> List[ParsedButton]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫–Ω–æ–ø–æ–∫ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        buttons = []
        
        if not reply_markup:
            return buttons
            
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º inline keyboard
            if hasattr(reply_markup, 'rows'):
                for row in reply_markup.rows:
                    for button in row.buttons:
                        button_info = await self.parse_single_button(button)
                        if button_info:
                            buttons.append(button_info)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            elif hasattr(reply_markup, 'resize') or hasattr(reply_markup, 'single_use'):
                for row in reply_markup.rows:
                    for button in row.buttons:
                        button_info = await self.parse_single_button(button)
                        if button_info:
                            buttons.append(button_info)
                            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–Ω–æ–ø–æ–∫: {e}")
            
        return buttons
    
    async def parse_single_button(self, button) -> Optional[ParsedButton]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–∏"""
        try:
            text = button.text
            
            # URL –∫–Ω–æ–ø–∫–∞
            if hasattr(button, 'url'):
                return ParsedButton(
                    text=text,
                    button_type='url',
                    url=button.url
                )
            
            # Callback –∫–Ω–æ–ø–∫–∞
            elif hasattr(button, 'data'):
                return ParsedButton(
                    text=text,
                    button_type='callback',
                    data=button.data.decode('utf-8') if isinstance(button.data, bytes) else str(button.data)
                )
            
            # Web App –∫–Ω–æ–ø–∫–∞
            elif hasattr(button, 'web_app'):
                return ParsedButton(
                    text=text,
                    button_type='web_app',
                    web_app_url=button.web_app.url
                )
            
            # Switch Inline –∫–Ω–æ–ø–∫–∞
            elif hasattr(button, 'query'):
                return ParsedButton(
                    text=text,
                    button_type='switch_inline',
                    data=button.query
                )
            
            # –û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞
            else:
                return ParsedButton(
                    text=text,
                    button_type='text'
                )
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–Ω–æ–ø–∫–∏: {e}")
            return None
    
    async def parse_message(self, event) -> ParsedMessage:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
        sender = await event.get_sender()
        sender_name = sender.first_name if hasattr(sender, 'first_name') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        sender_username = f"@{sender.username}" if hasattr(sender, 'username') and sender.username else ""
        is_bot = hasattr(sender, 'bot') and sender.bot
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
        bot_info = None
        if is_bot:
            bot_info = {
                'bot_id': sender.id,
                'bot_name': sender_name,
                'bot_username': sender_username,
                'is_verified': hasattr(sender, 'verified') and sender.verified,
                'is_scam': hasattr(sender, 'scam') and sender.scam,
                'is_fake': hasattr(sender, 'fake') and sender.fake
            }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞
        media_type = None
        media_url = None
        if event.media:
            if isinstance(event.media, MessageMediaPhoto):
                media_type = "photo"
            elif isinstance(event.media, MessageMediaDocument):
                media_type = "document"
            elif isinstance(event.media, MessageMediaWebPage):
                media_type = "webpage"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–µ—à—Ç–µ–≥–∏ –∏ —Å—Å—ã–ª–∫–∏
        text = event.text or ""
        hashtags = re.findall(r'#\w+', text)
        urls = re.findall(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', text)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        reactions = []
        try:
            if hasattr(event, 'reactions') and event.reactions:
                for reaction in event.reactions.results:
                    reactions.append({
                        "emoji": reaction.reaction.emoticon,
                        "count": reaction.count
                    })
        except:
            pass
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ—Å—ã–ª–∫–µ
        forwards = None
        if event.forward:
            try:
                original_chat = await event.get_chat()
                forwards = {
                    "original_chat_id": original_chat.id,
                    "original_chat_title": getattr(original_chat, 'title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                    "original_message_id": event.forward.from_id
                }
            except:
                pass
        
        # –ü–∞—Ä—Å–∏–º –∫–Ω–æ–ø–∫–∏
        buttons = []
        if hasattr(event, 'reply_markup') and event.reply_markup:
            buttons = await self.parse_buttons(event.reply_markup)
        
        return ParsedMessage(
            message_id=event.id,
            chat_id=event.chat_id,
            sender_id=sender.id,
            sender_name=sender_name,
            sender_username=sender_username,
            text=text,
            media_type=media_type,
            media_url=media_url,
            timestamp=event.date,
            reply_to=event.reply_to.reply_to_msg_id if event.reply_to else None,
            forwards=forwards,
            reactions=reactions,
            hashtags=hashtags,
            urls=urls,
            buttons=buttons,  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            is_bot=is_bot,
            bot_info=bot_info  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        )
    
    async def save_message(self, parsed_message: ParsedMessage) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ JSON —Ñ–∞–π–ª"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            existing_data = []
            if self.save_path.exists():
                with open(self.save_path, 'r', encoding='utf-8') as f:
                    existing_data = json.load(f)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_dict = asdict(parsed_message)
            message_dict['timestamp'] = message_dict['timestamp'].isoformat()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä–∏
            message_dict['buttons'] = [asdict(button) for button in parsed_message.buttons]
            
            existing_data.append(message_dict)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            with open(self.save_path, 'w', encoding='utf-8') as f:
                json.dump(existing_data, f, ensure_ascii=False, indent=2)
                
            button_count = len(parsed_message.buttons)
            sender_type = "ü§ñ –ë–æ—Ç" if parsed_message.is_bot else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {parsed_message.message_id} –æ—Ç {parsed_message.sender_name} ({sender_type}) (–∫–Ω–æ–ø–æ–∫: {button_count})")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        duration = None
        if self.stats.start_time:
            duration = (datetime.now() - self.stats.start_time).total_seconds()
        
        return {
            "total_messages": self.stats.total_messages,
            "bot_messages": self.stats.bot_messages,
            "bot_commands": self.stats.bot_commands,
            "messages_with_buttons": self.stats.messages_with_buttons,
            "errors": self.stats.errors,
            "duration_seconds": duration,
            "messages_per_second": self.stats.total_messages / duration if duration else 0,
            "parsing_active": self.parsing_active,
            "bot_statistics": self.bot_stats
        }
    
    def get_bot_analysis(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –±–æ—Ç–æ–≤"""
        return {
            "total_bots": self.bot_stats['total_bots'],
            "bot_commands": self.bot_stats['bot_commands'],
            "bot_interactions": self.bot_stats['bot_interactions'],
            "top_commands": dict(sorted(self.bot_stats['bot_commands'].items(), key=lambda x: x[1], reverse=True)[:10]),
            "most_active_bots": sorted(
                self.bot_stats['bot_interactions'].items(),
                key=lambda x: x[1]['message_count'],
                reverse=True
            )[:5]
        }
    
    async def export_to_csv(self, output_path: str = "data/export.csv") -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–æ—Ä–º–∞—Ç"""
        import csv
        
        if not self.save_path.exists():
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        with open(self.save_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        if not data:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è
        all_fields = set()
        for message in data:
            all_fields.update(message.keys())
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—è –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
        fieldnames = sorted(list(all_fields))
        
        with open(output_path, 'w', newline='', encoding='utf-8') as f:
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(data)
        
        print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {output_path}")

# ===========================================
# –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ===========================================

async def example_usage():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ)
    client = TelegramClient(
        'parser_session',
        api_id=12345678,  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π API_ID
        api_hash='your_api_hash_here'  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π API_HASH
    )
    
    await client.start()
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = MessageParser(client)
    
    # ID –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID)
    chat_id = -1001234567890
    
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...")
    print("üí° –ò—Å–ø–æ–ª—å–∑—É–π Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("‚ÑπÔ∏è –î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã")
    print("üîò –ü–∞—Ä—Å–∏–Ω–≥ –∫–Ω–æ–ø–æ–∫ –≤–∫–ª—é—á–µ–Ω")
    print("ü§ñ –ü–∞—Ä—Å–∏–Ω–≥ –±–æ—Ç–æ–≤ –≤–∫–ª—é—á–µ–Ω")
    
    try:
        # –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        await parser.start_parsing(chat_id)
        
        # –ñ–¥–µ–º –≤–≤–æ–¥–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        await asyncio.sleep(3600)  # –ü–∞—Ä—Å–∏–º 1 —á–∞—Å
        
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
        await parser.stop_parsing()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = parser.get_stats()
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:")
        print(f"   –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–æ–≤: {stats['bot_messages']}")
        print(f"   –ö–æ–º–∞–Ω–¥ –±–æ—Ç–æ–≤: {stats['bot_commands']}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏: {stats['messages_with_buttons']}")
        print(f"   –û—à–∏–±–æ–∫: {stats['errors']}")
        print(f"   –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {stats['duration_seconds']:.1f} —Å–µ–∫")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫: {stats['messages_per_second']:.2f}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –±–æ—Ç–æ–≤
        bot_analysis = parser.get_bot_analysis()
        print(f"\nü§ñ –ê–Ω–∞–ª–∏–∑ –±–æ—Ç–æ–≤:")
        print(f"   –í—Å–µ–≥–æ –±–æ—Ç–æ–≤: {bot_analysis['total_bots']}")
        print(f"   –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: {list(bot_analysis['top_commands'].keys())[:5]}")
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        await parser.export_to_csv()
        
    finally:
        await client.disconnect()

# ===========================================
# –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –í –û–°–ù–û–í–ù–û–ô –ë–û–¢
# ===========================================

class ParsingCommands:
    """–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–æ–º"""
    
    def __init__(self, parser: MessageParser):
        self.parser = parser
        self.target_chat_id = None
    
    async def start_parsing_command(self, event):
        """–ö–æ–º–∞–Ω–¥–∞ .parsing_start"""
        if self.parser.parsing_active:
            await event.respond("‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
        chat_id = self.target_chat_id or -1001234567890  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID
        
        await self.parser.start_parsing(chat_id)
        await event.respond("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! (–≤–∫–ª—é—á–∞—è –∫–Ω–æ–ø–∫–∏ –∏ –±–æ—Ç–æ–≤)")
    
    async def stop_parsing_command(self, event):
        """–ö–æ–º–∞–Ω–¥–∞ .parsing_stop"""
        if not self.parser.parsing_active:
            await event.respond("‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω!")
            return
        
        await self.parser.stop_parsing()
        await event.respond("üõë –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    
    async def parsing_status_command(self, event):
        """–ö–æ–º–∞–Ω–¥–∞ .parsing_status"""
        stats = self.parser.get_stats()
        
        status_text = f"üìä **–°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥–∞:**\n"
        status_text += f"üîÑ –ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if stats['parsing_active'] else '–ù–µ—Ç'}\n"
        status_text += f"üìù –°–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n"
        status_text += f"ü§ñ –û—Ç –±–æ—Ç–æ–≤: {stats['bot_messages']}\n"
        status_text += f"üîò –° –∫–Ω–æ–ø–∫–∞–º–∏: {stats['messages_with_buttons']}\n"
        status_text += f"‚ùå –û—à–∏–±–æ–∫: {stats['errors']}\n"
        
        if stats['duration_seconds']:
            status_text += f"‚è±Ô∏è –í—Ä–µ–º—è: {stats['duration_seconds']:.1f} —Å–µ–∫\n"
            status_text += f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {stats['messages_per_second']:.2f} —Å–æ–æ–±—â/—Å–µ–∫"
        
        await event.respond(status_text)
    
    async def bot_analysis_command(self, event):
        """–ö–æ–º–∞–Ω–¥–∞ .bot_analysis"""
        bot_analysis = self.parser.get_bot_analysis()
        
        analysis_text = f"ü§ñ **–ê–Ω–∞–ª–∏–∑ –±–æ—Ç–æ–≤:**\n"
        analysis_text += f"üìä –í—Å–µ–≥–æ –±–æ—Ç–æ–≤: {bot_analysis['total_bots']}\n\n"
        
        if bot_analysis['top_commands']:
            analysis_text += f"üîù **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            for i, (command, count) in enumerate(list(bot_analysis['top_commands'].items())[:5], 1):
                analysis_text += f"{i}. /{command}: {count} —Ä–∞–∑\n"
        
        if bot_analysis['most_active_bots']:
            analysis_text += f"\nüî• **–°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã:**\n"
            for i, (bot_id, bot_info) in enumerate(bot_analysis['most_active_bots'][:3], 1):
                analysis_text += f"{i}. {bot_info['name']}: {bot_info['message_count']} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        
        await event.respond(analysis_text)
    
    async def parsing_export_command(self, event):
        """–ö–æ–º–∞–Ω–¥–∞ .parsing_export"""
        try:
            await self.parser.export_to_csv()
            await event.respond("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –§–∞–π–ª: data/export.csv")
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")

# ===========================================
# –ó–ê–ü–£–°–ö –ü–†–ò–ú–ï–†–ê
# ===========================================

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ –ø–∞—Ä—Å–µ—Ä–∞...")
    print("‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å –∑–∞–º–µ–Ω–∏—Ç—å API_ID –∏ API_HASH!")
    print("‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å –∑–∞–º–µ–Ω–∏—Ç—å chat_id –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –≥—Ä—É–ø–ø—ã!")
    print("‚ÑπÔ∏è –î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã (–ù–ï –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º)")
    print("üîò –ü–∞—Ä—Å–∏–Ω–≥ –∫–Ω–æ–ø–æ–∫ –≤–∫–ª—é—á–µ–Ω")
    print("ü§ñ –ü–∞—Ä—Å–∏–Ω–≥ –±–æ—Ç–æ–≤ –≤–∫–ª—é—á–µ–Ω")
    
    # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞:
    # asyncio.run(example_usage()) 