#!/usr/bin/env python3
"""
Script –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram Userbot
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç .env —Ñ–∞–π–ª –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
"""

import os
import sys
import importlib
from pathlib import Path

def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å .env —Ñ–∞–π–ª–∞"""
    print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    
    if Path(".env").exists():
        print("‚úÖ .env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω")
        return True
    elif Path("my.env").exists():
        print("‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω my.env, –Ω–æ –Ω—É–∂–µ–Ω .env")
        print("   –°–∫–æ–ø–∏—Ä—É–π—Ç–µ my.env –≤ .env: copy my.env .env")
        return False
    else:
        print("‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("   –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ my.env")
        return False

def check_required_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("\nüìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
    
    required_files = ["config.py", "main_pipeline.py", "requirements.txt"]
    all_exist = True
    
    for file in required_files:
        if Path(file).exists():
            print(f"‚úÖ {file} –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"‚ùå {file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            all_exist = False
    
    return all_exist

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
    
    if not Path("venv").exists():
        print("‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        print("   –°–æ–∑–¥–∞–π—Ç–µ venv: python -m venv venv")
        print("   –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ: venv\\Scripts\\activate")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        return False
    
    print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    required_packages = [
        'telethon', 'python-dotenv', 'pandas', 'matplotlib', 
        'aiofiles', 'sqlalchemy', 'requests'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            importlib.import_module(package)
            print(f"‚úÖ {package}")
        except ImportError:
            missing_packages.append(package)
            print(f"‚ùå {package}")
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö: pip install -r requirements.txt")
        return False
    else:
        print("\n‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True

def check_configuration():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ"""
    print("\n‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    
    if not Path(".env").exists():
        print("‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return False
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    from dotenv import load_dotenv
    load_dotenv()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    required_vars = ['API_ID', 'API_HASH']
    missing_vars = []
    
    for var in required_vars:
        value = os.getenv(var)
        if value and value != 'your_api_hash_here':
            print(f"‚úÖ {var}")
        else:
            missing_vars.append(var)
            print(f"‚ùå {var}")
    
    if missing_vars:
        print(f"\n‚ö†Ô∏è  –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: {', '.join(missing_vars)}")
        print("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∏—Ö –≤ .env —Ñ–∞–π–ª–µ")
        return False
    else:
        print("\n‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—ã
    source_group = os.getenv('SOURCE_GROUP_ID')
    target_group = os.getenv('TARGET_GROUP_ID')
    parsing_group = os.getenv('PARSING_GROUP_ID')
    
    if source_group and target_group:
        print("‚úÖ –ì—Ä—É–ø–ø—ã –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    else:
        print("‚ö†Ô∏è  –ì—Ä—É–ø–ø—ã –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    if parsing_group:
        print("‚úÖ –ì—Ä—É–ø–ø–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    else:
        print("‚ö†Ô∏è  –ì—Ä—É–ø–ø–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram Userbot...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    env_ok = check_env_file()
    files_ok = check_required_files()
    deps_ok = check_dependencies()
    config_ok = check_configuration()
    
    print("\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ .env —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ API_ID –∏ API_HASH")
    print("2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ ID –≥—Ä—É–ø–ø –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞")
    print("3. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–ø–µ—Ä–µ—Å—ã–ª–∫–∞/–ø–∞—Ä—Å–∏–Ω–≥)")
    print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python main_pipeline.py")
    
    if all([env_ok, files_ok, deps_ok, config_ok]):
        print("\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("\n‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 