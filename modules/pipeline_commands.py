"""
–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞–º–∏ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
"""

import json
import asyncio
from typing import Dict, List, Any
from datetime import datetime
from telethon import events
from telethon.tl.types import User

from .pipeline_manager import PipelineManager

class PipelineCommands:
    """–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞–º–∏"""
    
    def __init__(self, client, pipeline_manager: PipelineManager):
        self.client = client
        self.pipeline_manager = pipeline_manager
        self.logger = pipeline_manager.logger
    
    async def setup_commands(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥"""
        @self.client.on(events.NewMessage(pattern=r'^\.pipelines_start_all$'))
        async def start_all_pipelines(event):
            await self.start_all_pipelines_command(event)
        
        @self.client.on(events.NewMessage(pattern=r'^\.pipelines_stop_all$'))
        async def stop_all_pipelines(event):
            await self.stop_all_pipelines_command(event)
        
        @self.client.on(events.NewMessage(pattern=r'^\.pipeline_status (.+)$'))
        async def pipeline_status(event):
            await self.pipeline_status_command(event)
        
        @self.client.on(events.NewMessage(pattern=r'^\.source_add (.+) (-?\d+)$'))
        async def add_source(event):
            await self.add_source_command(event)
        
        @self.client.on(events.NewMessage(pattern=r'^\.source_remove (.+)$'))
        async def remove_source(event):
            await self.remove_source_command(event)
        
        @self.client.on(events.NewMessage(pattern=r'^\.destination_add (.+) (.+) (.+)$'))
        async def add_destination(event):
            await self.add_destination_command(event)
        
        @self.client.on(events.NewMessage(pattern=r'^\.destination_remove (.+)$'))
        async def remove_destination(event):
            await self.remove_destination_command(event)
        
        @self.client.on(events.NewMessage(pattern=r'^\.pipeline_create (.+) (.+) (.+)$'))
        async def create_pipeline(event):
            await self.create_pipeline_command(event)
        
        @self.client.on(events.NewMessage(pattern=r'^\.pipeline_remove (.+)$'))
        async def remove_pipeline(event):
            await self.remove_pipeline_command(event)
        
        @self.client.on(events.NewMessage(pattern=r'^\.stats_export (.+)$'))
        async def export_stats(event):
            await self.export_stats_command(event)
        
        @self.client.on(events.NewMessage(pattern=r'^\.pipelines_list$'))
        async def list_pipelines(event):
            await self.list_pipelines_command(event)
        
        @self.client.on(events.NewMessage(pattern=r'^\.sources_list$'))
        async def list_sources(event):
            await self.list_sources_command(event)
        
        @self.client.on(events.NewMessage(pattern=r'^\.destinations_list$'))
        async def list_destinations(event):
            await self.list_destinations_command(event)
    
    async def start_all_pipelines_command(self, event):
        """–ö–æ–º–∞–Ω–¥–∞ .pipelines_start_all"""
        try:
            started_count = 0
            failed_count = 0
            
            for pipeline_name in self.pipeline_manager.pipelines:
                if self.pipeline_manager.pipelines[pipeline_name].enabled:
                    success = await self.pipeline_manager.start_pipeline(pipeline_name)
                    if success:
                        started_count += 1
                    else:
                        failed_count += 1
            
            response = f"üöÄ **–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø–∞–π–ø–ª–∞–π–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω**\n\n"
            response += f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ: {started_count}\n"
            response += f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
            response += f"üìä –í—Å–µ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–æ–≤: {len(self.pipeline_manager.pipelines)}"
            
            await event.respond(response)
        
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–æ–≤: {e}")
    
    async def stop_all_pipelines_command(self, event):
        """–ö–æ–º–∞–Ω–¥–∞ .pipelines_stop_all"""
        try:
            stopped_count = 0
            
            for pipeline_name in self.pipeline_manager.pipelines:
                success = await self.pipeline_manager.stop_pipeline(pipeline_name)
                if success:
                    stopped_count += 1
            
            response = f"üõë **–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø–∞–π–ø–ª–∞–π–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
            response += f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {stopped_count}\n"
            response += f"üìä –í—Å–µ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–æ–≤: {len(self.pipeline_manager.pipelines)}"
            
            await event.respond(response)
        
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–π–ø–ª–∞–π–Ω–æ–≤: {e}")
    
    async def pipeline_status_command(self, event):
        """–ö–æ–º–∞–Ω–¥–∞ .pipeline_status <pipeline_name>"""
        try:
            pipeline_name = event.pattern_match.group(1)
            status = await self.pipeline_manager.get_pipeline_status(pipeline_name)
            
            if not status:
                await event.respond(f"‚ùå –ü–∞–π–ø–ª–∞–π–Ω '{pipeline_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            response = f"üìä **–°—Ç–∞—Ç—É—Å –ø–∞–π–ø–ª–∞–π–Ω–∞: {pipeline_name}**\n\n"
            response += f"üîÑ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if status['enabled'] else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}\n"
            response += f"üì• –ò—Å—Ç–æ—á–Ω–∏–∫: {status['source']}\n"
            response += f"üì§ –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è: {', '.join(status['destinations'])}\n"
            response += f"üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {status['total_processed']}\n"
            response += f"‚ùå –û—à–∏–±–æ–∫: {status['total_errors']}\n"
            
            if status['last_run']:
                response += f"üïê –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: {status['last_run']}\n"
            
            if status['stats']:
                stats = status['stats']
                response += f"\nüìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                response += f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats.get('messages_processed', 0)}\n"
                response += f"‚Ä¢ –û—à–∏–±–æ–∫: {stats.get('messages_errors', 0)}\n"
                response += f"‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {stats.get('processing_time', 0):.2f}—Å\n"
                
                if stats.get('last_activity'):
                    response += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats['last_activity']}\n"
            
            await event.respond(response)
        
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    async def add_source_command(self, event):
        """–ö–æ–º–∞–Ω–¥–∞ .source_add <name> <id>"""
        try:
            name = event.pattern_match.group(1)
            source_id = int(event.pattern_match.group(2))
            
            success = await self.pipeline_manager.add_source(name, source_id)
            
            if success:
                response = f"‚úÖ **–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω**\n\n"
                response += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
                response += f"üÜî ID: {source_id}\n"
                response += f"üìä –í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(self.pipeline_manager.sources)}"
                
                await event.respond(response)
            else:
                await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ '{name}'")
        
        except ValueError:
            await event.respond("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞")
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {e}")
    
    async def remove_source_command(self, event):
        """–ö–æ–º–∞–Ω–¥–∞ .source_remove <name>"""
        try:
            name = event.pattern_match.group(1)
            success = await self.pipeline_manager.remove_source(name)
            
            if success:
                response = f"üóëÔ∏è **–ò—Å—Ç–æ—á–Ω–∏–∫ —É–¥–∞–ª–µ–Ω**\n\n"
                response += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
                response += f"üìä –û—Å—Ç–∞–ª–æ—Å—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(self.pipeline_manager.sources)}"
                
                await event.respond(response)
            else:
                await event.respond(f"‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {e}")
    
    async def add_destination_command(self, event):
        """–ö–æ–º–∞–Ω–¥–∞ .destination_add <name> <type> <config>"""
        try:
            name = event.pattern_match.group(1)
            dest_type = event.pattern_match.group(2)
            config_str = event.pattern_match.group(3)
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            try:
                config = json.loads(config_str)
            except json.JSONDecodeError:
                await event.respond("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å JSON)")
                return
            
            success = await self.pipeline_manager.add_destination(name, dest_type, config)
            
            if success:
                response = f"‚úÖ **–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ**\n\n"
                response += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
                response += f"üîß –¢–∏–ø: {dest_type}\n"
                response += f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {json.dumps(config, ensure_ascii=False)}\n"
                response += f"üìä –í—Å–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π: {len(self.pipeline_manager.destinations)}"
                
                await event.respond(response)
            else:
                await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è '{name}'")
        
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {e}")
    
    async def remove_destination_command(self, event):
        """–ö–æ–º–∞–Ω–¥–∞ .destination_remove <name>"""
        try:
            name = event.pattern_match.group(1)
            success = await self.pipeline_manager.remove_destination(name)
            
            if success:
                response = f"üóëÔ∏è **–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ**\n\n"
                response += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
                response += f"üìä –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π: {len(self.pipeline_manager.destinations)}"
                
                await event.respond(response)
            else:
                await event.respond(f"‚ùå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {e}")
    
    async def create_pipeline_command(self, event):
        """–ö–æ–º–∞–Ω–¥–∞ .pipeline_create <name> <source> <destinations>"""
        try:
            name = event.pattern_match.group(1)
            source = event.pattern_match.group(2)
            destinations_str = event.pattern_match.group(3)
            
            # –ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
            destinations = [dest.strip() for dest in destinations_str.split(',')]
            
            success = await self.pipeline_manager.create_pipeline(name, source, destinations)
            
            if success:
                response = f"‚úÖ **–ü–∞–π–ø–ª–∞–π–Ω —Å–æ–∑–¥–∞–Ω**\n\n"
                response += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
                response += f"üì• –ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n"
                response += f"üì§ –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è: {', '.join(destinations)}\n"
                response += f"üìä –í—Å–µ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–æ–≤: {len(self.pipeline_manager.pipelines)}"
                
                await event.respond(response)
            else:
                await event.respond(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞ '{name}'")
        
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
    
    async def remove_pipeline_command(self, event):
        """–ö–æ–º–∞–Ω–¥–∞ .pipeline_remove <name>"""
        try:
            name = event.pattern_match.group(1)
            success = await self.pipeline_manager.remove_pipeline(name)
            
            if success:
                response = f"üóëÔ∏è **–ü–∞–π–ø–ª–∞–π–Ω —É–¥–∞–ª–µ–Ω**\n\n"
                response += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
                response += f"üìä –û—Å—Ç–∞–ª–æ—Å—å –ø–∞–π–ø–ª–∞–π–Ω–æ–≤: {len(self.pipeline_manager.pipelines)}"
                
                await event.respond(response)
            else:
                await event.respond(f"‚ùå –ü–∞–π–ø–ª–∞–π–Ω '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
    
    async def export_stats_command(self, event):
        """–ö–æ–º–∞–Ω–¥–∞ .stats_export <type>"""
        try:
            export_type = event.pattern_match.group(1)
            
            if export_type == "all_pipelines":
                stats = await self.pipeline_manager.get_statistics()
                
                response = f"üìä **–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏**\n\n"
                response += f"üìà **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                response += f"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {stats['sources_count']}\n"
                response += f"‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–π: {stats['destinations_count']}\n"
                response += f"‚Ä¢ –ü–∞–π–ø–ª–∞–π–Ω–æ–≤: {stats['pipelines_count']}\n"
                response += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {stats['active_sources']}\n"
                response += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π: {stats['active_destinations']}\n"
                response += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–π–ø–ª–∞–π–Ω–æ–≤: {stats['active_pipelines']}\n\n"
                
                if stats['report']:
                    report = stats['report']
                    response += f"üìã **–û—Ç—á–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:**\n"
                    response += f"‚Ä¢ –í—Å–µ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–æ–≤: {report['summary']['total_pipelines']}\n"
                    response += f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {report['summary']['total_processed']}\n"
                    response += f"‚Ä¢ –û—à–∏–±–æ–∫: {report['summary']['total_errors']}\n"
                    response += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–π–ø–ª–∞–π–Ω–æ–≤: {report['summary']['active_pipelines']}\n"
                
                await event.respond(response)
            
            else:
                await event.respond("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: all_pipelines")
        
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def list_pipelines_command(self, event):
        """–ö–æ–º–∞–Ω–¥–∞ .pipelines_list"""
        try:
            if not self.pipeline_manager.pipelines:
                await event.respond("üìã –ü–∞–π–ø–ª–∞–π–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            response = f"üìã **–°–ø–∏—Å–æ–∫ –ø–∞–π–ø–ª–∞–π–Ω–æ–≤** ({len(self.pipeline_manager.pipelines)})\n\n"
            
            for name, pipeline in self.pipeline_manager.pipelines.items():
                status = "‚úÖ" if pipeline.enabled else "‚ùå"
                response += f"{status} **{name}**\n"
                response += f"   üì• –ò—Å—Ç–æ—á–Ω–∏–∫: {pipeline.source}\n"
                response += f"   üì§ –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è: {', '.join(pipeline.destinations)}\n"
                response += f"   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {pipeline.total_processed}\n"
                response += f"   ‚ùå –û—à–∏–±–æ–∫: {pipeline.total_errors}\n\n"
            
            await event.respond(response)
        
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–æ–≤: {e}")
    
    async def list_sources_command(self, event):
        """–ö–æ–º–∞–Ω–¥–∞ .sources_list"""
        try:
            if not self.pipeline_manager.sources:
                await event.respond("üìã –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            response = f"üìã **–°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤** ({len(self.pipeline_manager.sources)})\n\n"
            
            for name, source in self.pipeline_manager.sources.items():
                status = "‚úÖ" if source.enabled else "‚ùå"
                response += f"{status} **{name}**\n"
                response += f"   üÜî ID: {source.id}\n"
                response += f"   üìù –¢–∏–ø: {source.type}\n"
                response += f"   üìä –°–æ–æ–±—â–µ–Ω–∏–π: {source.message_count}\n"
                response += f"   ‚ùå –û—à–∏–±–æ–∫: {source.error_count}\n\n"
            
            await event.respond(response)
        
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {e}")
    
    async def list_destinations_command(self, event):
        """–ö–æ–º–∞–Ω–¥–∞ .destinations_list"""
        try:
            if not self.pipeline_manager.destinations:
                await event.respond("üìã –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            response = f"üìã **–°–ø–∏—Å–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π** ({len(self.pipeline_manager.destinations)})\n\n"
            
            for name, destination in self.pipeline_manager.destinations.items():
                status = "‚úÖ" if destination.enabled else "‚ùå"
                response += f"{status} **{name}**\n"
                response += f"   üîß –¢–∏–ø: {destination.type}\n"
                response += f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {destination.success_count}\n"
                response += f"   ‚ùå –û—à–∏–±–æ–∫: {destination.error_count}\n\n"
            
            await event.respond(response)
        
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π: {e}") 